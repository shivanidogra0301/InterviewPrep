use the structure.

public static TreeNode construct(int n) {
		if (n == 0) {
			return null;
		}
		TreeNode left = construct(n / 2);

		//inorder
		TreeNode root = new TreeNode(temp.val);
		temp = temp.next;
		
		root.left = left;
		root.right = construct(n - n / 2 - 1);
		return root;
	}

Sorted List to balanceBST
List<TreeNode> sortedArr = new ArrayList<>();
    public TreeNode balanceBST(TreeNode root) {
        inorderTraverse(root);
        return sortedArrayToBST(0, sortedArr.size() - 1);
    }
    void inorderTraverse(TreeNode root) {
        if (root == null) return;
        inorderTraverse(root.left);
        sortedArr.add(root);
        inorderTraverse(root.right);
    }
    TreeNode sortedArrayToBST(int start, int end) {
        if (start > end) return null;
        int mid = (start + end) / 2;
        TreeNode root = sortedArr.get(mid);
        root.left = sortedArrayToBST(start, mid - 1);
        root.right = sortedArrayToBST(mid + 1, end);
        return root;
    }