  class Pair{
        TreeNode node;
        int lev;
        
        Pair(TreeNode node, int lev){
            this.node = node;
            this.lev = lev;
                
        }
    }
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        HashMap<Integer,ArrayList<Pair>> map = new HashMap<>();
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(root,0));
        int hl = 0;
        
        while(q.size() > 0){
            int size = q.size();
            while(size-- > 0){
                Pair rem = q.remove();
                min = Math.min(min,rem.lev);
                max = Math.max(max,rem.lev);
                
                map.putIfAbsent(rem.lev,new ArrayList<>());
                map.get(rem.lev).add(new Pair(rem.node,hl));
                
                
                if(rem.node.left != null){
                    q.add(new Pair(rem.node.left,rem.lev-1));
                }
                
                if(rem.node.right != null){
                    q.add(new Pair(rem.node.right,rem.lev+1));
                }
            }
            hl++;
        }
        List<List<Integer>> ans = new ArrayList<>();
        for(int i = min; i <= max; i++){
            ArrayList<Pair> list = map.get(i);
            
            Collections.sort(list , (a,b) ->{
                if(a.lev != b.lev){
                    return a.lev - b.lev;
                }
                
                return a.node.val - b.node.val;
            });
             List<Integer> temp = new ArrayList<>();  
            for(Pair p : list){
                temp.add(p.node.val);
            }
            
            ans.add(temp);
            
        }
        
        return ans;
        
    }