 // LIFO last in first out
    // addition and removal in top of the stack
    // functions of the stack
    // push = add
    // pop = remove
    // peek = get  (gives the top of the stack)
    // size
    // isEmpty

    int[] data;
    int size = 0;
    int top;

    public stack(int cap){
        this.data = new int[cap];
        this.top = -1;
    }

    int size(){
        return this.top + 1;
    }

    boolean isEmpty(){
        return this.size() == 0;
    }

    void push(int data){
        if(this.top == this.data.length - 1){
            System.out.println("Stack overflow");
        }
        else{
            this.top++;
            this.data[top] = data;
        }
    }

    int pop(){
        if(this.top == -1){
            System.out.println("Stack underflow");
            return -1;
        }
        else{
            int val = this.data[this.top];
            this.data[this.top] = 0;
            this.top--;
            return val;
        }
    }

    int peek(){
        if(this.top == -1){
            System.out.println("Stack underflow");
            return -1;
        }
        else{
            return this.data[this.top];
        }
    }

    void display(){
        for(int i = this.top; i >= 0; i--){
            System.out.print(this.data[i] + ",");
        }
        System.out.println();
    }
    public static void main(String[] args){
        stack s = new stack(3);
        for(int i = 1; i <= 4; i++){
            s.push(i);
        }

        System.out.println("Top of stack " + s.peek());
        s.display();
        s.size();

        for(int i = 3; i >= 0; i--){
            s.pop();
        }

        System.out.println(s.isEmpty());


    }