1. Infix evaluation

1. operand - direct push
2. operator - check while top have high priority operator, use it and pop it.
                then push latest
3. ( - direct push
4. ) - pop until ( , solve it
5. after completion, remove everything from stack and solve it


public static int precedence(char op) {
		if (op == '+' || op == '-') {
			return 1;
		} 
		else{
			return 2;
		} 
	}

	public static long eval(long v1, long v2, char op) {
		if (op == '+') {
			return v1 + v2;
		}
		else if (op == '-') {
			return v1 - v2;
		}
		else if (op == '*') {
			return v1 * v2;
		}
		else if(op == '%'){
			return v1 % v2;
		}
		 else {
			return v1 / v2;
		}
	}

	public static long calculate(String s) {
		Stack<Long> operands = new Stack<>();
		Stack<Character> operator = new Stack<>();

		for (int i = 0; i < s.length(); i++) {
			char c = s.charAt(i);

			if (c == '(') {
				operator.push(c);
			}
			else if (c == ')') {
				while (operator.peek() != '(') {
					char op = operator.pop();
					long v2 = operands.pop();
					long v1 = operands.pop();
					long val = eval(v1, v2, op);
					operands.push(val);
				}
				operator.pop();
			}
			else if (c == '+' || c == '-' || c == '*' || c == '/' || c == '%') {
				while (operator.size() > 0 && operator.peek() != '(' && precedence(c) <= precedence(operator.peek())) {
					char op = operator.pop();
					long v2 = operands.pop();
					long v1 = operands.pop();
					long val = eval(v1, v2, op);
					operands.push(val);
				}
				operator.push(c);
			}
			else if (c == ' ') {
			}
			else{
				//means it is a number
				//may contains more than 2 digits
				long val = 0;
				while(i < s.length() && Character.isDigit(s.charAt(i))){
					val = val * 10 + (s.charAt(i++) - '0');
				}
				operands.push(val);
				i--;
			}
		}

		while (operator.size() > 0) {
			char op = operator.pop();
			long v2 = operands.pop();
			long v1 = operands.pop();
			long val = eval(v1, v2, op);
			operands.push(val);
		}
		return operands.peek();
	}

	public static void main(String[] args) {
		String s = "0-2147483648";
		System.out.println(calculate(s));
	}

2. Prefix evaluation
We don't need to care about precedence, so only one stack and use it for evalutions
ie for every operator push 2 values from stack and solve it put it back
keep in mind loop start from end.
// first pop will ve v1 in case of prefix
public static int PrefixEvaluation(String s) {
        Stack<Integer> operands = new Stack<>();
        for (int i = s.length() - 1; i >= 0; i--) {
            char c = s.charAt(i);
            if (c == '+' || c == '-' || c == '*' || c == '/' || c == '^') {
                    int v1 = operands.pop();
                    int v2 = operands.pop();
                    int val = eval(v1, v2, c);
                    operands.push(val);
            } else if (c == ' ') {

            } else {
                int val = s.charAt(i) - '0';
                operands.push(val);
            }
        }
        return operands.peek();
    }

3. Postfix Evaluation
public static int PostfixEvaluation(String s) {
        Stack<Integer> operands = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '+' || c == '-' || c == '*' || c == '/' || c == '^') {
                    int v2 = operands.pop();
                    int v1 = operands.pop();
                    int val = eval(v1, v2, c);
                    operands.push(val);
            } else if (c == ' ') {

            } else {
                int val = s.charAt(i) - '0';
                operands.push(val);
            }
        }
        return operands.peek();
    }