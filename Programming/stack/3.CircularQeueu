int[] queue;
    int front;
    int rear;
    int size;
    public MyCircularDeque(int k) {
        queue = new int[k];
        front = rear = -1;
        size = k;
    }
    
    public boolean insertFront(int value) {
        if(front == (rear+1)%size) {
            return false;
        } 

        // first time
        if(front == -1) {
            front++;
            rear++;
 
        }
        else if(front == 0) {
            front = size-1;
        }
        else {
            front--;
        }
        queue[front] = value;
        return true;
    }
    
    public boolean insertLast(int value) {
        if((rear+1)%size == front) {
            return false;
        }
        if(rear == -1) {
            front++;
            rear++;
        }
        else{
            rear = (rear+1)%size;
        }
        queue[rear] = value;
        return true;
    }
    
    public boolean deleteFront() {
        if(front == -1) {
            return false;
        }
        if(front == rear) {
            front=-1;
            rear=-1;
        }
        else{
            front = (front+1)%size;
        }
        return true;
    }
    
    public boolean deleteLast() {
        if(rear == -1) {
            return false;
        }
        if(front == rear) {
            front=-1;
            rear=-1;
        }
        else{
            if(rear == 0) {
                rear = size-1;
            }
            else {
                rear--;
            }
            
        }
        return true;
    }
    
    public int getFront() {
        if(front == -1){
            return -1;
        }
        return queue[front];
    }
    
    public int getRear() {
        if(rear == -1){
            return -1;
        }
        return queue[rear];
    }
    
    public boolean isEmpty() {
        if(front == -1 && rear == -1){
            return true;
        }
        return false;
    }
    
    public boolean isFull() {
        if(front == (rear+1)%size){
            return true;
        }
        return false;
    }