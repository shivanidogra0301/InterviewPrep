https://leetcode.com/problems/next-greater-element-ii/
Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number.
 If it doesn't exist, return -1 for this number.


Solution: earlier for last element, we used to put -1, but now we want
to check rest of the array as well for last element. So first we wll traveser
and put the values in stack according to same logic, then start
calculating ans using the stack we filled during first iteration.

public int[] nextGreaterElements(int[] nums) {
        int n = nums.length;
        int[] ngr = new int[n];
        Stack<Integer> st = new Stack<>();

        // not alculating answers
        for(int i = n-2; i >= 0; i--) {
            while(st.size() > 0 && nums[i] >= st.peek()) {
                st.pop();
            }
            st.push(nums[i]);
        }

        for(int i = n-1; i >= 0; i--) {
            while(st.size() > 0 && nums[i] >= st.peek()) {
                st.pop();
            }
            if(st.size() > 0) {
                ngr[i] = st.peek();
            }
            else{
                ngr[i] = -1;
            }
            st.push(nums[i]);
        }

        return ngr;

    }