You have planned some train traveling one year in advance. 
The days of the year in which you will travel are given 
as an integer array days. Each day is an integer from 1 to 365.

Train tickets are sold in three different ways:
    a 1-day pass is sold for costs[0] dollars,
    a 7-day pass is sold for costs[1] dollars, and
    a 30-day pass is sold for costs[2] dollars.

The passes allow that many days of consecutive travel.
    For example, if we get a 7-day pass on day 2,
     then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8.

Return the minimum number of dollars you need to travel every day 
in the given list of days.

Example 1:

Input: days = [1,4,6,7,8,20], costs = [2,7,15]
Output: 11
Explanation: For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.
On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.
On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.
In total, you spent $11 and covered all the days of your travel.


Solution: dp[i] stores min cost to travel upto day i,
at every box we check if I took seven days pass, then my cost will days[i-7] tak jitni 
lgegi + cost of 7th day pass so everyday I have 3 choices


 public int mincostTickets(int[] days, int[] costs) {
        int lastDay = days[days.length - 1];
        // create a dp of size of maximum day since it is increasing order meanign last day
        int[] dp = new int[lastDay+1];

        int i = 0; // pointer to days which we need to travel
        for(int day = 1; day < dp.length; day++) {
            // check if we want to travel that day if not no additional cost
            if(day < days[i]) {
                dp[day] = dp[day-1];
            }
            else {
                int c1 = (day - 1) < 0 ? 0 : dp[day-1];
                int c2 = (day - 7) < 0 ? 0 : dp[day-7];
                int c3 = (day - 30) < 0 ? 0 : dp[day-30];
                dp[day] = Math.min(c1 + costs[0], Math.min(c2  + costs[1] , c3 + costs[2]));
                i++;
            }
        }
        return dp[lastDay];
    }