c0 = 1
c1 = 1
c2 = coc1 + c1c0 =  2
c3 = c0c2+ c1c1+ c2c0 =  2 + 1 + 2 = 5

so firterm j = 0 to i-1. seconterm = i-j-1
public static void main(String[] args){
		Scanner scn = new Scanner(System.in);
		int n = scn.nextInt();
		int[] dp = new int[n + 1];
		dp[0] = dp[1] = 1;
		for(int i = 2; i <= n; i++){
			for(int j = 0; j < i; j++){
				dp[i] += dp[j] * dp[i - j - 1];
			}
		}
		System.out.println(dp[n]); 
	} 

same code applications
1. Total number of BST when n nodes is given: count catalan number of N
2. given n pair of upstock / and downstock \, count total number of mountains and vallyes made
for n = 0  ans = 1
for n = 1    /\ = 1
n = 2    ans = 2
meaning /\ iske andr ek pair use, ya iske bahar
 / \     
/   \   / \/\
c1.c0    c0.c1

n = 3    
  / \
 /   \         /\     / \                     / \/\
/     \   / \ /  \   /    \  /\    /\/\/\   /       \

3. Combination of balanced parenthesis
4. given circle and chords, find total no of non intersecting chords(cn/2)
5. given no of side of polygon, how many triangle you can cut (cn-2)
n=3, c0 = 1
https://cp-algorithms.com/combinatorics/catalan-numbers.html
