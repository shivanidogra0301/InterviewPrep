1. Longest Common Subsequence
total subequence 2^N given 2 strings, find longest Common

when comparing 2 string we can divide the problem in 2 parts s1, s2
c1r1, c2r2
total comparisons
_r1 x _ r2  --- 1
_r1 x c2r2 ---2
c1r1 x _r2 --- 3
c1r1 x c2r2 --- 4

if c1 == c2 , dp[i][j] = dp[i-1][j-1] + 1 
because if answer is in 1, the max ans will surely in 4
in 2,3 if exist, that also will be covered in 4th no need to check

c1 != c2, ans will for sure not be in 4th, meaniing only check those
condition where we don;t have c1 c2 simutaneously,
dp[i][j] = Max(dp[i][j-1], dp[i-1][j]) 


Longest Common Substring
if c1 == c2, simply dp[i][j] = 1 + dp[i-1][j-1]
else dp[i][j] = 0 but ans can be  anywhere, so take max


Count distinct subequence
normally ss - 2^n, now dp[i] = dp[i-1] * 2 if not appeared before
else dp[i] = dp[i-1] * 2 - dp[j-1], where j is last occurence of that char in dp array not actual string
for abcc, j = 2, 

Longest repeating subequence, make sure the repeating should have diffrent index
just write the code for longest common ss, and then add one more condition if i!=j
only then include it in ans


Count Pallindromic Substring (gap strategy)
g==0, true, g==1, check c1==c2 true, g>=2, check c1=c2 and dp[i+1][j-1] also be true
then count total true values

longest Pallindromic Substring
above ques, just check if true, len = g+1

Longest pallindromic subsequence
simple g==0 1
g==1   c1=c2 = 2, else 1
g>=2, c1==c2, 2+dp[i+1][j-1]
else max(dp[i][j-1], d[i+1][j])


Count Pallindromic subequence
g==0 , 1
g==1,  c1=c2 3 : 2
g>=2 c1=c2  dp[i][j-1] + dp[i+1][j] + 1 e.g a1a2a3, then count(a1a2) + count(a2a3) + count(aaa)

else dp[i][j-1] + dp[i+1][j] - dp[i+1][j-1], e.f aac, then count(aa) + count(ac) - count(a) becuase subsequence of only a is duplicate in first 2


    int[] prev = new int[s.length()];
    int[] next = new int[s.length()];
    HashMap<Character , Integer> map = new HashMap<>();
    
    for(int i = 0; i < s.length(); i++){
        char c = s.charAt(i);
        if(!map.containsKey(c)){
            prev[i] = -1;
        }
        else{
            prev[i] = map.get(c);
        }

        map.put(c , i);
    }

    map.clear();

    for(int i = s.length() - 1; i >= 0; i--){
        char c = s.charAt(i);
        if(!map.containsKey(c)){
            next[i] = -1;
        }
        else{
            next[i] = map.get(c);
        }

        map.put(c , i);
    }

    int[][] dp = new int[s.length()][s.length()];

    for(int gap = 0; gap < s.length(); gap++){
        for(int i = 0,j = gap; j < s.length(); j++,i++){
            if(gap == 0){
                dp[i][j] = 1;

            }
            else if(gap == 1){
                dp[i][j] =  2;
            }
            else{
                if(s.charAt(i) != s.charAt(j)){
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                }
                else{
                    int n = next[i];
                    int p = prev[j];
                    if(n > p){
                        dp[i][j] = 2 * dp[i + 1][j - 1] + 2;
                    }
                    else if(n == p){
                        dp[i][j] = 2 * dp[i + 1][j - 1] + 1;
                    }
                    else{
                        dp[i][j] = 2 * dp[i + 1][j - 1] - dp[n + 1][p - 1];
                    }
                }
            }
        }
    }

    System.out.println(dp[0][s.length() - 1]);

explanantion: hmne string ko 4 parts m divide kia
mid ss    x1
c1 mid   x2
mid c2   x3
c1 mid c2  x4
now if c1 == c2, and  x1 + x2 + x3 + x4 is ans
but we know if c1=c2, meaning x4 = x1+1, all sub of middle and plus one with empty ss of case1
maning if mid = ab, total pallindromic ss = 2, but total paaling in cabc will 3 a b cc 

= x1+x2+x3+x1+1
= ss(mid and ss starting with c1) + ss(mid ad ss ending withc2) + 1


for other case when c1!=c2, x4 = 0
c1 + c2 + c3 + c1 - c1
ss(mid and ss starting with c1) + ss(mid ad ss ending withc2) - ss(mid)


count distinct pallindromic subsqurenct
for case c1!=c2, ans is same above
c1=c2 , a----a = 2dps[mid] + 2
a --a----a = 2dps[mid] + 1
a--a--a--a = 2dps[mid] -dps[m']