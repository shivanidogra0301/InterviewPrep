https://leetcode.com/problems/shortest-bridge/
 
  class Pair{
        int i;
        int j;
        Pair(int i, int j){
            this.i = i;
            this.j = j;
        }
    }
    public int shortestBridge(int[][] grid) {
        // changed one component into 2 value
        change(grid);
        Queue<Pair> q = new LinkedList<>();
        for(int i = 0; i < grid.length; i++){
           for(int j =0; j < grid[0].length; j++){
               // added other component having value = 1 as source
                if(grid[i][j] == 1){
                    q.add(new Pair(1,i,j));
                }
            }
            
        }
        // level count
        int count = 0;
        int[][] dir = {{-1,0},{0,1},{1,0},{0,-1}};
        
        while(q.size() > 0){
            int size = q.size();
            while(size-- > 0){
                Pair rem = q.remove();
                for(int i = 0; i < 4; i++){
                    int rdash = rem.i + dir[i][0];
                    int cdash = rem.j + dir[i][1];
                    
                    // negative cases
                    if(rdash < 0 || cdash < 0 || rdash >= grid.length|| cdash >= grid[0].length){
                        continue;
                    }

                    // 0 means unvisited marking it 1 to make it visited
                    if(grid[rdash][cdash] == 0){
                        grid[rdash][cdash] = 1;
                        q.add(new Pair(rdash,cdash));
                    }else if(grid[rdash][cdash] == 2){
                        // this means we got 2nd component nbr since it is bfs so first and is minimum ans
                        return count;
                    }
                }
            }
            count++;
        }
        return -1;  
    }

    public static void change(int[][] grid){
        for(int i = 0; i < grid.length; i++){
           for(int j =0; j < grid[0].length; j++){
                if(grid[i][j] == 1){
                    dfs(grid,i,j);
                    // meaning only one component value is updated
                    return;
                }
            }
            
        }
    }
    public static void dfs(int[][] grid, int i,int j){
        grid[i][j] = 2;
        int[][] dir = {{-1,0},{0,1},{1,0},{0,-1}};
        
        for(int k = 0; k < 4; k++){
            int rdash = i + dir[k][0];
            int cdash = j + dir[k][1];
            if(rdash < 0 || cdash < 0 || rdash >= grid.length|| cdash >= grid[0].length||grid[rdash][cdash] != 1){
                continue;
            }
            dfs(grid,rdash,cdash);
        }
    }