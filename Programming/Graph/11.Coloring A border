https://leetcode.com/problems/coloring-a-border/description/
You are given an m x n integer matrix grid, and three integers row, col, and color. Each value in the 
grid represents the color of the grid square at that location.
Two squares are called adjacent if they are next to each other in any of the 4 directions.
Two squares belong to the same connected component if they have the same color and they are adjacent.
The border of a connected component is all the squares in the connected component that are either adjacent to (at least) a square not in the component, or on the boundary of the grid (the first or last row or column).
You should color the border of the connected component that contains the square grid[row][col] with color.
Return the final grid.

// hme color krna hai ek connected component ko dusre color m. connected component ki conditions de rkhi hai
i.e 4 dired and have same color. So simple uss condition k kiye connected components vala dfs lgana hai.
Now main catch is, we only want to color those who are in border. mtlb jinke adjacent m 4 direction se km main
vo color hoga, to simple hai 4 directions ka color check krke count nikal lenge, if count is !=4
meaning it;s in border so color it.


Agar hme, extra space use ni krna hai, to vis ki jgah hm matrix m -ve curcolr kro and vistied mark kro fir last
m check kro agar count == 4 hai meaning vo non boundary hai to uski real value se replace krdo otherwise
nested loop chlake -ve value ko new color m change krdo

public int[][] colorBorder(int[][] grid, int r0, int c0, int color) {
        boolean[][] vis = new boolean[grid.length][grid[0].length];
        dfs(grid,r0,c0,grid[r0][c0],color,vis);
        return grid;
    }
    
    public static void dfs(int[][] grid, int r, int c,int curcolor,int color,boolean[][]vis){
        vis[r][c] = true;
        
        int[][] dir = {{-1,0},{0,1},{1,0},{0,-1}};
        int count = 0;
        for(int i =0; i < 4; i++){
            int nr = r + dir[i][0];
            int nc = c+dir[i][1];
            // check range m h ya ni
            if(nr < 0 || nc < 0 || nr >= grid.length || nc >= grid[0].length ){
                continue;
            }
            
            if(vis[nr][nc] == true){
                count++;
            }
            else{
                if(grid[nr][nc] == curcolor){
                    count++;
                    dfs(grid,nr,nc,curcolor,color,vis);
                }
                
                    
            }
        }
        // non border elements
        if(count != 4){
            grid[r][c] = color;
        }
    }