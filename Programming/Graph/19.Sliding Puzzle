https://leetcode.com/problems/sliding-puzzle/description/
Fixed 2x3 array given or hme use 123450 is form m lana hai minimum no of swaps krke
Also swap hm sirf 0 ko kr skte hai with its 4 nbrs only. We want to find minimum swaps

1. Greedy nhi lgega hr combination check but minimum krna to aise check krenge
first ans hi best ans ho that we can acheive by bfs.

2. Minimum swaps krne hai, to confirm bfs lgega jisme level 1 means hmne zero ko
uske direct nbr se swap kia, fir dekha ans aaya ya nhi, if not then jahan swap kia
uske 4 nbrs pe swap krke dekhenge which is level 2 so that's why it's a graph question.

3. To make it easier, and have the track of visited ki ek pattern hmne krlia vo dobara
na aaye because vo fir minimum ans nhi hoga, for that we use a smart solution. kyuki array ka size
confirmed hai we can defined the nbrs directly i.r ki agr 0 0 index pe hai to vo kis 
kis se swap ho skta hai

 public int slidingPuzzle(int[][] board) {
     // keep count ki 0 agar 2 index pe ho to kis kis se swap ho skta hai.
        int[][] dirs = {{1,3},{0,2,4},{1,5},{0,4},{1,3,5},{2,4}};

        // final ans
        String ans = "123450";
        Queue<StringBuilder> q = new LinkedList<>();      
        StringBuilder sb = new StringBuilder();
        for(int i =0 ; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                sb.append(board[i][j]);
            }
        }
        // added source
        q.add(sb);
        // for checking visted
        HashSet<String> set = new HashSet<>();
        set.add(sb.toString());
        int count = 0;
        while(q.size()> 0){
            int size = q.size();
            while(size-- > 0){
                StringBuilder rem = q.remove();
                if(rem.toString().equals("123450")){
                    return count;
                }

                //find which position have 0
                int idx = -1;
                for(int i = 0; i < 6; i++){
                    char ch = rem.charAt(i);
                    if(ch == '0'){
                        idx = i;
                        break;
                    }
                }
                // System.out.println(idx);
                // get its nbrs
                int [] dir = dirs[idx];
                for(int i = 0; i < dir.length; i++){
                    StringBuilder ns = new StringBuilder(rem);
                    // swapping with nbr
                    char temp = ns.charAt(idx);
                    ns.setCharAt(idx, ns.charAt(dir[i]));
                    ns.setCharAt(dir[i],temp);
                    // if not visted
                    if(!set.contains(ns.toString())){
                        q.add(ns);
                        set.add(ns.toString());
                    }
                    // System.out.println(ns.toString());
                }
            }
            count++;
        } 
        return -1;
}