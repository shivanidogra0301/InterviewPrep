Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
src will abe all the string starting with given string. do the dfs for each one of them to get the ans.

public boolean exist(char[][] board, String word) {

        for(int i = 0; i< board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(word.charAt(0) == board[i][j]){
                    boolean ans = helper(board, word, 0, i, j, new boolean[board.length][board[0].length]);
                    if(ans){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    int[][] dirs = {{-1, 0}, {0,1}, {1,0}, {0,-1}};
    public boolean helper(char[][] board, String word, int idx, int r, int c, boolean[][] vis) {
        if(idx == word.length()) {
            return true;
        }
        if(r < 0 || r >= board.length || c < 0 || c >= board[0].length || vis[r][c]) {
            return false;
        }
        vis[r][c] = true;
        for(int[] dir : dirs) {
            int nr = r + dir[0];
            int nc = c + dir[1];


            if(word.charAt(idx) == board[r][c] && helper(board, word, idx+1, nr, nc, vis)){
                return true;
            }
            
        }
        vis[r][c] = false;
        return false;
    }