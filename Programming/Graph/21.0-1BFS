Agar hme aise graph m minimum cost fromsrc to dest nikalna ho jaha sirf 2 wts hai
0 and 1, then don't necessarily need PriorityQueue because we can itself add the
wts in such a way it exectued in soerting order this is called 0-1BFS

how do we do that? simple we will add the edges having 0 wt in front and 
edges having 1 wt at the end becuase algorithmically 0 wts edges needs to be
used first.

So, 
https://leetcode.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid/description/

min cost btani for one valid path, so what will do for edge we will make an opposite
edge whose cost will be 1 then we use 0-1 bfs to find the shortest path tha will
be our cost.

static int[][] dir = {{0,1},{0,-1},{1,0},{-1,0}};
 public int minCost(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        LinkedList<Pair> q = new LinkedList<>();
        q.add(new Pair(0,0,0));
        boolean[][] visited = new boolean[n][m]; 
        while(q.size() > 0){
            Pair rem = q.removeFirst();
            // System.out.println(rem.x +" "+rem.y+" "+rem.cost);
            if(rem.x == n-1 && rem.y == m-1){
                
                return rem.cost;
            }
            visited[rem.x][rem.y] = true;
            for(int i = 0; i < 4; i++){
                int newx = rem.x + dir[i][0];
                int newy = rem.y + dir[i][1];
                if(newx < 0 || newx >= n || newy < 0 || newy >= m || visited[newx][newy] == true){
                    continue;
                }
                // in grid we have given directions left mean 1 like that so if there
                exist an edge
                if(grid[rem.x][rem.y] == i+1){
                    q.addFirst(new Pair(newx,newy,rem.cost+0));
                }
                else{
                    q.addLast(new Pair(newx,newy,rem.cost+1));
                }
            }
            
        }
        return 0;
    }
    static class Pair{
        int x;
        int y;
        int cost;
        Pair(int x,int y,int cost){
            this.x = x;
            this.y = y;
            this.cost = cost;
        }
    }