here we are checking the volume of water that can be stored between cells
kind of a graph question but not exactly

we can use the approach ki 4 directions m max nikalke uska min nikaldo becuase
idhr water is not only flowing in 4 direction it can turn from any cell.
but main point is water will leak surely from boundary. so if a cell must store some water
it's height should be less than all of the boundary cells otherwise it can  leak


solution  1. put all the boundaries cell in pq (hm sbse weak se compare krege),
 there we can't store water
2. go to its nbr if its less than remove, meaning vaha paani store ho skta hai min jitna uss
weakest boundary pr kr skte hai.
3. take visited array for marking.


class Pair implements Comparable<Pair>{
        int val;
        int r;
        int c;
        Pair(int val, int r, int c){
            this.val = val;
            this.r = r;
            this.c = c;
        }
        public int compareTo(Pair o){
            return this.val - o.val;
        }
        
    }
    public int trapRainWater(int[][] heightMap) {
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        boolean[][] vis =new boolean[heightMap.length][heightMap[0].length];
        
        for(int i = 0; i < heightMap.length; i++){
            if(i == 0 || i == heightMap.length-1){
                for(int j = 0; j < heightMap[0].length ; j++){
                    pq.add(new Pair(heightMap[i][j],i,j));
                    vis[i][j] = true;
                }
            }
            else{
                pq.add(new Pair(heightMap[i][0],i,0));
                vis[i][0] = true;
    pq.add(new Pair(heightMap[i][heightMap[0].length - 1],i,heightMap[0].length - 1));
                vis[i][heightMap[0].length - 1] = true;
                
            }
            
        }
        // System.out.println(pq.remove().val);
        int[][]  dirs={{-1,0},{1,0},{0,-1},{0,1}}; 
        int ans = 0;
        while(pq.size() > 0){
            Pair rp = pq.remove();
            
            for(int[] dir : dirs){
                int nr = dir[0] + rp.r;
                int nc = dir[1] +rp.c;
                if(nr < 0 || nc < 0 || nr >= heightMap.length || nc >=                                              heightMap[0].length ||vis[nr][nc] == true){
                        continue;
                }
                if(heightMap[nr][nc] >= rp.val){
                    pq.add(new Pair(heightMap[nr][nc],nr,nc));
                    vis[nr][nc] = true;
                }
                else{
                    ans += rp.val - heightMap[nr][nc];
                    pq.add(new Pair(rp.val,nr,nc));
                    vis[nr][nc] = true;
                    
                }
            }
        }
        return ans;
    }