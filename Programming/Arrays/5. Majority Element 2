n/3 se zyada nikalna hai, 
1. ans can be more than one 
2. so v1 and v2 m jo ans hoga
usko traverse krke check kr lenge, ki if they are present more than n/3.

simple 3 bnde ko pair krna hai.

public List<Integer> majorityElement(int[] nums) {
        int val1 = nums[0];
        int c1 = 1;
        int val2 = nums[0];
        int c2 = 0;
        
        for(int i = 1; i < nums.length; i++){
            if(nums[i] != val1 && nums[i] != val2){
                if(c1 == 0){
                    val1 = nums[i];
                    c1++;
                }
                else if(c2 == 0){
                    val2 = nums[i];
                    c2++;
                }
                else{
                    c1--;
                    c2--;
                }
            }
            else{
                if(val1 == nums[i]){
                    c1++;
                }
                else{
                    c2++;
                }
            }
        }
        
        int f1 = 0;
        int f2 = 0;
        
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == val1){
                f1++;
            }
            else if(nums[i] == val2){
                f2++;
            }
        }
        
        int n = nums.length;
        List<Integer> list = new ArrayList<>();
        if(f1 > n/3){
            list.add(val1);
        }
        if(f2 > n/3){
            list.add(val2);
        }
        
        return list;
        
    }

but general best solution should be hashmap with count having o(n) space
time o(1)