Given an unsorted integer array nums, return the smallest missing positive integer.
You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.

Example 1:

Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.

Solution
1. ans can be in range 1 to nums.length only becuase even if all the values are 
present, the ans will be nums.length so that the max ans.
2. Swap all positive non zero elemeent to their position which is nums[i]-1 index that means
3 should be at 2index, then iterate over which position is not present in correct
wil be the final ans.

public int firstMissingPositive(int[] nums) {
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == (i+1)){
                continue;
            }
            if(nums[i] <= 0 || nums[i] > nums.length){
                continue;
            }
            int si = i;
            int ei = nums[i]-1;
            // to avoid cycles
            if(nums[si] == nums[ei]){
                continue;
            }
            int temp = nums[si];
            nums[si] = nums[ei];
            nums[ei] = temp;

            // after swapping i have unknown element
            i--;
        }
        
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != (i+1)){
                return (i+1);
            }
        }
        
        return nums.length+1;
        
    }
